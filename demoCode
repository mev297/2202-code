
//  Language: Arduino (C++)
//  Target:   ESP32-S3
//  Author:   Merlyn, Lauren, Chirayu
//  Date:     2024 04 01 
//

#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <SPI.h>
#include "Adafruit_TCS34725.h"

#define SERVO_PIN_1 41 // Define the pin connected to the first servo motor
#define SERVO_PIN_2 42 // Define the pin connected to the second servo motor
#define SERVO_MIN_PULSE_WIDTH 544 // Minimum pulse width in microseconds
#define SERVO_MAX_PULSE_WIDTH 2400 // Maximum pulse width in microseconds
#define SERVO_MIN_ANGLE 0 // Minimum angle in degrees
#define SERVO_MAX_ANGLE 180 // Maximum angle in degrees
#define SERVO_MOVE_TIME 1000   // Time taken to move from min to max angle (in milliseconds)

// Function declarations
void buttonISR(void* arg);
void timerISR();
long degreesToDutyCycle(int deg);
void moveServo(int targetPosition, int servoPin);

// Button structure
struct Button {
  const int pin;
  unsigned int numberPresses;
  unsigned long lastPressTime;
  bool pressed;
};

// Constants
const int cHeartbeatInterval = 75;                    // heartbeat update interval, in milliseconds
const int cSmartLED          = 21;                    // when DIP switch S1-4 is on, SMART LED is connected to GPIO21
const int cTCSLED            = 14;
const int cLEDSwitch         = 46;

const int cSDA               = 47;                    // GPIO pin for I2C data
const int cSCL               = 48;                    // GPIO pin for I2C clock
const int cStepPin           = 40;
const int cDirPin            = 39;
const long cDebounceDelay    = 20;

// Variables
unsigned int robotIndex      = 0;
Button button                = {0, 0, 0, false};
boolean stepDir              = true;
volatile int32_t stepCount   = 0;
boolean stepperRunState      = false;
Adafruit_TCS34725 tcs        = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_4X);
bool tcsFlag                 = true;
int pos1 = 0; // Variable to store the position of the first servo motor
int pos2 = 0; // Variable to store the position of the second servo motor
boolean motorsEnabled = true;                                                  // motors enabled flag
boolean timeUp3sec = false;                                                    // 3 second timer elapsed flag
boolean timeUp2sec = false;                                                    // 2 second timer elapsed flag
unsigned char driveSpeed;                                                      // motor drive speed (0-255)
unsigned char driveIndex;                                                      // state index for run mode
unsigned int  modePBDebounce;                                                  // pushbutton debounce timer count
unsigned long timerCount3sec = 0;                                              // 3 second timer count in milliseconds
unsigned long timerCount2sec = 0;                                              // 2 second timer count in milliseconds
unsigned long displayTime;                                                     // heartbeat LED update timer
unsigned long previousMicros;                                                  // last microsecond count
unsigned long currentMicros;                                                   // current microsecond count
long targetCounts;
long pauseStart;


hw_timer_t * pTimer; // Declare pTimer

void setup() {
  pinMode(SERVO_PIN_1, OUTPUT); // Set the first servo pin as an output
  pinMode(SERVO_PIN_2, OUTPUT); // Set the second servo pin as an output
  // Initialize timer
  pTimer = timerBegin(0, 80, true); // Timer 0, prescaler 80, count up
  timerAttachInterrupt(pTimer, &timerISR, true); // Attach timer interrupt
  timerAlarmWrite(pTimer, 1000, true); // 1 ms period
  timerAlarmEnable(pTimer); // Enable the timer

  Wire.setPins(cSDA, cSCL);                           // set I2C pins for TCS34725
  pinMode(cTCSLED, OUTPUT);                           // configure GPIO to control LED on TCS34725
  pinMode(cLEDSwitch, INPUT_PULLUP);                  // configure GPIO to set state of TCS34725 LED 
   if (tcs.begin()) {
    Serial.printf("Found TCS34725 colour sensor\n");
    tcsFlag = true;
  } 
  else {
    Serial.printf("No TCS34725 found ... check your connections\n");
    tcsFlag = false;
  }  
}


void loop() {
  uint16_t r, g, b, c; // RGBC values from TCS34725
  digitalWrite(cTCSLED, !digitalRead(cLEDSwitch)); 

 currentMicros = micros();                                                   // get current time in microseconds
  if ((currentMicros - previousMicros) >= 1000) {                             // enter when 1 ms has elapsed
     previousMicros = currentMicros;                                          // record current time in microseconds


     // 3 second timer, counts 3000 milliseconds
     timerCount3sec = timerCount3sec + 1;                                     // increment 3 second timer count
     if (timerCount3sec > 3000) {                                             // if 3 seconds have elapsed
        timerCount3sec = 0;                                                   // reset 3 second timer count
        timeUp3sec = true;                                                    // indicate that 3 seconds have elapsed
     }
  
     // 2 second timer, counts 2000 milliseconds
     timerCount2sec = timerCount2sec + 1;                                     // increment 2 second timer count
     if (timerCount2sec > 2000) {                                             // if 2 seconds have elapsed
        timerCount2sec = 0;                                                   // reset 2 second timer count
        timeUp2sec = true;                                                    // indicate that 2 seconds have elapsed
     } // turn on onboard LED if switch state is low (on position)
  switch(robotIndex) {
    case 0: //arm is up
      robotIndex = 1;
      break;

    case 1: //robot detecting colour
      if (tcsFlag) { // if colour sensor initialized
        tcs.getRawData(&r, &g, &b, &c); // get raw RGBC values
        // Print RGB values if required
        Serial.printf("R: %d, G: %d, B: %d, C %d\n", r, g, b, c);
      }
      // if statement for detecting the colours
      if (g > r || g == r) {
        robotIndex = 2;
        break;
      }
      // Additional code if needed
      break;

    case 2: //rotate arm down with servo 1
      moveServo(60, SERVO_PIN_1);
      robotIndex = 3;
      break;

    case 3: //stepper rotates 1.5 rev
      stepperRunState = true; // Start the stepper motor
      stepDir = true; // Set the direction
      digitalWrite(cDirPin, stepDir); // Set direction pin
      if (timeUp2sec) { 
      robotIndex = 4;
                   } 
      break;

    case 4: //arm goes back up using servo 1
      moveServo(0, SERVO_PIN_1);
      robotIndex = 5;
      break;

    case 5: //servo 2 rotates more (in same direction as before) to bring to mounted container
      moveServo(180, SERVO_PIN_2);
      robotIndex = 6;
      break;

    case 6: //stepper rotates in the opposite direction to release the stone
      stepperRunState = true; // Start the stepper motor
      stepDir = false; // Reverse the direction
      digitalWrite(cDirPin, stepDir); // Set direction pin
      robotIndex = 7;
      break;

    case 7: //servo 2 rotates more (in same direction as before) to bring to mounted container
      moveServo(0, SERVO_PIN_2);
      break;

    default:
      // Handle invalid robotIndex value
      break;
  }
}
}

void buttonISR(void* arg) {
  Button* s = static_cast<Button*>(arg);
  uint32_t pressTime = millis();
  if (pressTime - s->lastPressTime > cDebounceDelay) {
    s->numberPresses += 1;
    s->pressed = true;
    s->lastPressTime = pressTime;
  }
}

void timerISR() {
  if (stepperRunState) {
    digitalWrite(cStepPin, !digitalRead(cStepPin));
    if (stepDir) {
      stepCount++;
    } else {
      stepCount--;
    }
  }
}

long degreesToDutyCycle(int deg) {
  const long cMinDutyCycle = 400;
  const long cMaxDutyCycle = 2100;
  long dutyCycle = map(deg, 0, 180, cMinDutyCycle, cMaxDutyCycle);
  return dutyCycle;
}

void moveServo(int targetPosition, int servoPin) {
  static unsigned long prevTime = 0;
  static int currentPosition = 0;
  static bool moving = false;

  unsigned long currentTime = millis(); // Get the current time

  if (!moving) { // If the servo is not currently moving
    if (currentTime - prevTime >= SERVO_MOVE_TIME) { // Check if it's time to move again
      moving = true; // Set the moving flag to true
      prevTime = currentTime; // Update the previous time
    }
  } else { // If the servo is currently moving
    int angleIncrement = (targetPosition - currentPosition) / (SERVO_MOVE_TIME / 20); // Calculate angle increment per update
    currentPosition += angleIncrement; // Increment the current position
    int pulseWidth = map(currentPosition, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_PULSE_WIDTH, SERVO_MAX_PULSE_WIDTH);
    digitalWrite(servoPin, HIGH); // Set the servo pin high
    delayMicroseconds(pulseWidth); // Wait for the calculated pulse width
    digitalWrite(servoPin, LOW); // Set the servo pin low

    if (currentPosition == targetPosition) { // If the servo reaches the target position
      moving = false; // Set the moving flag to false
    }
  }
}
