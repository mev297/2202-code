#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <SPI.h>
#include "Adafruit_TCS34725.h"

#define SERVO_PIN_1 41
#define SERVO_PIN_2 42
#define SERVO_MIN_PULSE_WIDTH 544
#define SERVO_MAX_PULSE_WIDTH 2400
#define SERVO_MIN_ANGLE 0
#define SERVO_MAX_ANGLE 180
#define SERVO_MOVE_TIME 1000
#define STEPPER_DURATION 3500 // Duration for stepper operation in milliseconds
#define SERVO_TO_STEPPER_DELAY 2000 // Delay between servo movement and stepper activation in milliseconds
#define STEPS_PER_METER 1000 // Assuming 1000 steps of the stepper motor equals 1 meter
#define TURN_STEPS 500 // Assuming 500 steps of the stepper motor equals 0.5 meter turn

// Function declarations
void ARDUINO_ISR_ATTR timerISR();
long degreesToDutyCycle(int deg);
void moveServo(int targetPosition, int servoPin);

// Constants
const int cHeartbeatInterval = 75;
const int cSmartLED          = 21;
const int cTCSLED            = 14;
const int cLEDSwitch         = 46;
const int cSDA               = 47;
const int cSCL               = 48;
const int cStepPin           = 40;
const int cDirPin            = 39;
const int cStepRes           = 8;
const int cStepFreq          = 100;
const long cDebounceDelay    = 20;

// Variables
unsigned int robotIndex      = 0;
boolean stepDir              = true;
volatile int32_t stepCount   = 0;
boolean stepperRunState      = false;
unsigned long stepperStartTime = 0; // Start time for the stepper operation
unsigned long servoToStepperStartTime = 0; // Start time for the delay between servo and stepper
int moveCount = 0; // Counter for the number of moves in the 3x3 pattern
Adafruit_TCS34725 tcs        = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_4X);
bool tcsFlag                 = true;
int pos1 = 0;
int pos2 = 0;

hw_timer_t * pTimer;

void setup() {
  pinMode(SERVO_PIN_1, OUTPUT);
  pinMode(SERVO_PIN_2, OUTPUT);
  pinMode(cStepPin, OUTPUT);
  pinMode(cDirPin, OUTPUT);

  pTimer = timerBegin(0, 80, true);
  timerAttachInterrupt(pTimer, &timerISR, true);
  timerAlarmWrite(pTimer, 1000, true);
  timerAlarmEnable(pTimer);

  Wire.setPins(cSDA, cSCL);
  pinMode(cTCSLED, OUTPUT);
  pinMode(cLEDSwitch, INPUT_PULLUP);
  if (tcs.begin()) {
    Serial.printf("Found TCS34725 colour sensor\n");
    tcsFlag = true;
  } else {
    Serial.printf("No TCS34725 found ... check your connections\n");
    tcsFlag = false;
  }
}

void loop() {
  uint16_t r, g, b, c;
  digitalWrite(cTCSLED, !digitalRead(cLEDSwitch));
  switch(robotIndex) {
    case 0: // Move 3 meters forward
      stepperRunState = true;
      stepDir = true;
      digitalWrite(cDirPin, stepDir);
      if (stepCount >= STEPS_PER_METER * 3) {
        stepperRunState = false;
        stepCount = 0;
        robotIndex = 1;
      }
      break;

    case 1: // Turn 0.5 meters
      stepperRunState = true;
      stepDir = !stepDir; // Change direction for turning
      digitalWrite(cDirPin, stepDir);
      if (stepCount >= TURN_STEPS) {
        stepperRunState = false;
        stepCount = 0;
        moveCount++;
        robotIndex = moveCount < 4 ? 0 : 2; // Repeat move and turn 4 times, then proceed to case 2
      }
      break;

    case 2: // Move servo
      moveServo(60, SERVO_PIN_1);
      servoToStepperStartTime = millis();
      robotIndex = 3;
      break;

    case 3: // Wait for 2 seconds
      if (millis() - servoToStepperStartTime >= SERVO_TO_STEPPER_DELAY) {
        stepperRunState = true;
        stepDir = true;
        digitalWrite(cDirPin, stepDir);
        stepperStartTime = millis();
        robotIndex = 4;
      }
      break;

    case 4: // Move stepper for 3.5 seconds
      if (millis() - stepperStartTime >= STEPPER_DURATION) {
        stepperRunState = false;
        moveServo(0, SERVO_PIN_1);
        robotIndex = 5;
      }
      break;

    case 5: // Move second servo
      moveServo(180, SERVO_PIN_2);
      robotIndex = 6;
      break;

    case 6: // Move stepper in reverse
      stepperRunState = true;
      stepDir = false;
      digitalWrite(cDirPin, stepDir);
      stepperStartTime = millis();
      robotIndex = 7;
      break;

    case 7: // Move stepper for 3.5 seconds in reverse
      if (millis() - stepperStartTime >= STEPPER_DURATION) {
        stepperRunState = false;
        moveServo(0, SERVO_PIN_2);
      }
      break;
  }
}

void ARDUINO_ISR_ATTR timerISR() {
  if (stepperRunState) {
    digitalWrite(cStepPin, !digitalRead(cStepPin));
    stepCount += stepDir ? 1 : -1;
  }
}

long degreesToDutyCycle(int deg) {
  const long cMinDutyCycle = 400;
  const long cMaxDutyCycle = 2100;
  return map(deg, 0, 180, cMinDutyCycle, cMaxDutyCycle);
}

void moveServo(int targetPosition, int servoPin) {
  static unsigned long prevTime = 0;
  static int currentPosition = 0;
  static bool moving = false;

  unsigned long currentTime = millis();
  if (!moving) {
    if (currentTime - prevTime >= SERVO_MOVE_TIME) {
      moving = true;
      prevTime = currentTime;
    }
  } else {
    int angleIncrement = (targetPosition - currentPosition) / (SERVO_MOVE_TIME / 20);
    currentPosition += angleIncrement;
    int pulseWidth = map(currentPosition, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_PULSE_WIDTH, SERVO_MAX_PULSE_WIDTH);
    digitalWrite(servoPin, HIGH);
    delayMicroseconds(pulseWidth);
    digitalWrite(servoPin, LOW);

    if (currentPosition == targetPosition) {
      moving = false;
    }
  }
}
