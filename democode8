#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <SPI.h>
#include "Adafruit_TCS34725.h"

#define SERVO_PIN_1 41
#define SERVO_PIN_2 42
#define SERVO_MIN_PULSE_WIDTH 544
#define SERVO_MAX_PULSE_WIDTH 2400
#define SERVO_MIN_ANGLE 0
#define SERVO_MAX_ANGLE 180
#define SERVO_MOVE_TIME 1000
#define STEPPER_DURATION 3500 // Duration for stepper operation in milliseconds
#define SERVO_TO_STEPPER_DELAY 2000 // Delay between servo movement and stepper activation in milliseconds
#define STEPS_PER_METER 1000 // Assuming 1000 steps of the stepper motor equals 1 meter
#define TURN_STEPS 500 // Assuming 500 steps of the stepper motor equals 0.5 meter turn
#define GREEN_THRESHOLD 100 // Threshold for detecting green color

// Function declarations
void ARDUINO_ISR_ATTR timerISR();
long degreesToDutyCycle(int deg);
void moveServo(int targetPosition, int servoPin);
void setMotor(int dir, int pwm, int in1, int in2);

// Constants
#define LEFT_MOTOR_A        35                                                 // GPIO35 pin 28 (J35) Motor 1 A
#define LEFT_MOTOR_B        36                                                 // GPIO36 pin 29 (J36) Motor 1 B
#define RIGHT_MOTOR_A       37                                                 // GPIO37 pin 30 (J37) Motor 2 A
#define RIGHT_MOTOR_B       38                                                 // GPIO38 pin 31 (J38) Motor 2 B
#define ENCODER_LEFT_A      15                                                 // left encoder A signal is connected to pin 8 GPIO15 (J15)
#define ENCODER_LEFT_B      16                                                 // left encoder B signal is connected to pin 8 GPIO16 (J16)
#define ENCODER_RIGHT_A     11                                                 // right encoder A signal is connected to pin 19 GPIO11 (J11)
#define ENCODER_RIGHT_B     12                                                 // right encoder B signal is connected to pin 20 GPIO12 (J12)
#define MODE_BUTTON         0                                                  // GPIO0  pin 27 for Push Button 1
#define MOTOR_ENABLE_SWITCH 3                                                  // DIP Switch S1-1 pulls Digital pin D3 to ground when on, connected to pin 15 GPIO3 (J3)
#define POT_R1              1                                                  // when DIP Switch S1-3 is on, Analog AD0 (pin 39) GPIO1 is connected to Poteniometer R1
#define SMART_LED           21                                                 // when DIP Switch S1-4 is on, Smart LED is connected to pin 23 GPIO21 (J21)
#define SMART_LED_COUNT     1                                                  // number of SMART LEDs in use

const int cHeartbeatInterval = 75;
const int cSmartLED          = 21;
const int cTCSLED            = 14;
const int cLEDSwitch         = 46;
const int cSDA               = 47;
const int cSCL               = 48;
const int cStepPin           = 40;
const int cDirPin            = 39;
const int cStepRes           = 8;
const int cStepFreq          = 100;
const long cDebounceDelay    = 20;
const int cPWMRes = 8;                                                         // bit resolution for PWM
const int cMinPWM = 150;                                                       // PWM value for minimum speed that turns motor
const int cMaxPWM = pow(2, cPWMRes) - 1;                                       // PWM value for maximum speed
const int cPWMFreq = 20000;                                                    // frequency of PWM signal
const int cCountsRev = 1096;                                                   // encoder pulses per motor revolution
const int cNumMotors = 2;                                                      // number of DC motors
const int cIN1Pin[] = {LEFT_MOTOR_A, RIGHT_MOTOR_A};                           // GPIO pin(s) for INT1
const int cIN1Chan[] = {0, 1};                                                 // PWM channe(s) for INT1
const int c2IN2Pin[] = {LEFT_MOTOR_B, RIGHT_MOTOR_B};                          // GPIO pin(s) for INT2
const int cIN2Chan[] = {2, 3};                                                 // PWM channel(s) for INT2

// Variables
unsigned int robotIndex      = 0;
boolean stepDir              = true;
volatile int32_t stepCount   = 0;
boolean stepperRunState      = false;
unsigned long stepperStartTime = 0; // Start time for the stepper operation
unsigned long servoToStepperStartTime = 0; // Start time for the delay between servo and stepper
int moveCount = 0; // Counter for the number of moves in the 3x3 pattern
Adafruit_TCS34725 tcs        = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_4X);
bool tcsFlag                 = true;
int pos1 = 0;
int pos2 = 0;
unsigned char driveSpeed;                                                      // motor drive speed (0-255)
unsigned char driveIndex;                                                      // state index for run mode
boolean motorsEnabled = true;                                                  // motors enabled flag
boolean timeUp3sec = false;                                                    // 3 second timer elapsed flag
boolean timeUp2sec = false;                                                    // 2 second timer elapsed flag
unsigned long timerCount3sec = 0;                                              // 3 second timer count in milliseconds
unsigned long timerCount2sec = 0;                                              // 2 second timer count in milliseconds
unsigned long displayTime;                                                     // heartbeat LED update timer
unsigned long previousMicros;                                                  // last microsecond count
unsigned long currentMicros;                                                   // current microsecond count
boolean greenDetected = false;                                                 // flag for green color detection

hw_timer_t * pTimer;

void setup() {
  pinMode(SERVO_PIN_1, OUTPUT);
  pinMode(SERVO_PIN_2, OUTPUT);
  pinMode(cStepPin, OUTPUT);
  pinMode(cDirPin, OUTPUT);

  pTimer = timerBegin(0, 80, true);
  timerAttachInterrupt(pTimer, &timerISR, true);
  timerAlarmWrite(pTimer, 1000, true);
  timerAlarmEnable(pTimer);

  Wire.setPins(cSDA, cSCL);
  pinMode(cTCSLED, OUTPUT);
  pinMode(cLEDSwitch, INPUT_PULLUP);
  if (tcs.begin()) {
    Serial.printf("Found TCS34725 colour sensor\n");
    tcsFlag = true;
  } else {
    Serial.printf("No TCS34725 found ... check your connections\n");
    tcsFlag = false;
  }

  // Set up motors
  for (int k = 0; k < cNumMotors; k++) {
      ledcAttachPin(cIN1Pin[k], cIN1Chan[k]);                                  // attach INT1 GPIO to PWM channel
      ledcSetup(cIN1Chan[k], cPWMFreq, cPWMRes);                               // configure PWM channel frequency and resolution
      ledcAttachPin(c2IN2Pin[k], cIN2Chan[k]);                                 // attach INT2 GPIO to PWM channel
      ledcSetup(cIN2Chan[k], cPWMFreq, cPWMRes);                               // configure PWM channel frequency and resolution
  }
}

void loop() {
  uint16_t r, g, b, c;
  digitalWrite(cTCSLED, !digitalRead(cLEDSwitch));
  switch(robotIndex) {
    case 0: // Robot stopped
      setMotor(0, 0, cIN1Chan[0], cIN2Chan[0]);                                // stop left motor
      setMotor(0, 0, cIN1Chan[1], cIN2Chan[1]);                                // stop right motor
      driveIndex = 0;                                                          // reset drive index
      timeUp2sec = false;                                                      // reset 2 second timer
      robotIndex = 1;
      break;

    case 1: // Color detection
      if (tcsFlag) {
        tcs.getRawData(&r, &g, &b, &c);
        if (g > r && g > GREEN_THRESHOLD) {
          greenDetected = true;
          robotIndex = 2; // Skip driving if green is detected
        } else {
          greenDetected = false;
          robotIndex = 2; // Proceed to driving
        }
      }
      break;

    case 2: // Drive robot
      if (!greenDetected && timeUp3sec) {                                      // Continue driving if green is not detected
         if (motorsEnabled) {                                                  // run motors only if enabled
            if (timeUp2sec) {                                                  // update drive state after 2 seconds
               timeUp2sec = false;                                             // reset 2 second timer
               switch(driveIndex) {                                            // cycle through drive states
                  case 0: // Stop
                     setMotor(0, 0, cIN1Chan[0], cIN2Chan[0]);                 // stop left motor
                     setMotor(0, 0, cIN1Chan[1], cIN2Chan[1]);                 // stop right motor
                     driveIndex = 1;                                           // next state: drive forward
                     break;

                  case 1: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 2;                                           // next state: drive forward
                     break;

                  case 2: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 3;                                           // next state: turn right
                     break;

                  case 3: // Turn right 90 degrees
                     setMotor(-1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);       // left motor reverse
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse
                     driveIndex = 4;                                           // next state: drive forward
                     break;

                  case 4: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 5;                                           // next state: turn right
                     break;

                  case 5: // Turn right
                     setMotor(-1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);       // left motor reverse
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse
                     driveIndex = 6;                                           // next state: drive forward
                     break;

                  case 6: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 7;                                           // next state: drive forward
                     break;

                  case 7: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 8;                                           // next state: turn right
                     break;

                  case 8: // Turn right
                     setMotor(-1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);       // left motor reverse
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse
                     driveIndex = 9;                                           // next state: drive forward
                     break;

                  case 9: // Drive forward
                     setMotor(1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);        // left motor forward
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse (opposite dir from left)
                     driveIndex = 10;                                          // next state: turn right
                     break;

                  case 10: // Turn right
                     setMotor(-1, driveSpeed, cIN1Chan[0], cIN2Chan[0]);       // left motor reverse
                     setMotor(-1, driveSpeed, cIN1Chan[1], cIN2Chan[1]);       // right motor reverse
                     driveIndex = 0;                                           // next state: stop
                     break;
               }
            }
         }
         else {                                                               // stop when motors are disabled
            setMotor(0, 0, cIN1Chan[0], cIN2Chan[0]);                         // stop left motor
            setMotor(0, 0, cIN1Chan[1], cIN2Chan[1]);                         // stop right motor
         }
      } else if (greenDetected) {                                              // If green is detected, skip to case 8
        robotIndex = 8;
      }
      break;

    // Cases 3 to 7: Same as previous code

    case 8: // Resume driving after other operations
      if (!greenDetected && timeUp3sec) {                                      // Continue driving if green is not detected
         if (motorsEnabled) {                                                  // run motors only if enabled
            if (timeUp2sec) {                                                  // update drive state after 2 seconds
               timeUp2sec = false;                                             // reset 2 second timer
               switch(driveIndex) {                                            // cycle through drive states
                  // Drive states here (same as previous code)
               }
            }
         }
         else {                                                                // stop when motors are disabled
            setMotor(0, 0, cIN1Chan[0], cIN2Chan[0]);                          // stop left motor
            setMotor(0, 0, cIN1Chan[1], cIN2Chan[1]);                          // stop right motor
         }
      }
      break;

    // Other cases for servo movements and color detection (same as previous code)
  }
}

void ARDUINO_ISR_ATTR timerISR() {
  if (stepperRunState) {
    digitalWrite(cStepPin, !digitalRead(cStepPin));
    stepCount += stepDir ? 1 : -1;
  }
}

long degreesToDutyCycle(int deg) {
  const long cMinDutyCycle = 400;
  const long cMaxDutyCycle = 2100;
  return map(deg, 0, 180, cMinDutyCycle, cMaxDutyCycle);
}

void moveServo(int targetPosition, int servoPin) {
  static unsigned long prevTime = 0;
  static int currentPosition = 0;
  static bool moving = false;

  unsigned long currentTime = millis();
  if (!moving) {
    if (currentTime - prevTime >= SERVO_MOVE_TIME) {
      moving = true;
      prevTime = currentTime;
    }
  } else {
    int angleIncrement = (targetPosition - currentPosition) / (SERVO_MOVE_TIME / 20);
    currentPosition += angleIncrement;
    int pulseWidth = map(currentPosition, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_PULSE_WIDTH, SERVO_MAX_PULSE_WIDTH);
    digitalWrite(servoPin, HIGH);
    delayMicroseconds(pulseWidth);
    digitalWrite(servoPin, LOW);

    if (currentPosition == targetPosition) {
      moving = false;
    }
  }
}

// send motor control signals, based on direction and pwm (speed)
void setMotor(int dir, int pwm, int in1, int in2) {
   if (dir == 1) {                                                            // forward
      ledcWrite(in1, pwm);
      ledcWrite(in2, 0);
   }
   else if (dir == -1) {                                                      // reverse
      ledcWrite(in1, 0);
      ledcWrite(in2, pwm);
   }
   else {                                                                     // stop
      ledcWrite(in1, 0);
      ledcWrite(in2, 0);
   }
}
